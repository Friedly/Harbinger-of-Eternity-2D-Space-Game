#include "CGraphicOptionState.hpp"
#include "CGameStateManager.hpp"
#include <sstream>

#include "CButton.hpp"
#include "CCheckbox.hpp"
#include "CComboBox.hpp"
#include "CLabel.hpp"
															ety::CGraphicOptionState::CGraphicOptionState				( const std::string& strStateName )
																: CDialogGameState( strStateName )
{
}
															ety::CGraphicOptionState::~CGraphicOptionState				( void )
{
}

void														ety::CGraphicOptionState::on_Enter							( ety::CRessourceManager* const p_c_etyCurrentRessourceManager, ety::CGamesettings* const p_c_etyCurrentGamesettingManager )
{
}
void														ety::CGraphicOptionState::on_Exit							( ety::CRessourceManager* const p_c_etyCurrentRessourceManager, ety::CGamesettings* const p_c_etyCurrentGamesettingManager )
{
}

void														ety::CGraphicOptionState::init_GameState					( ety::CRessourceManager* const p_c_etyCurrentRessourceManager, ety::CGamesettings* const p_c_etyCurrentGamesettingManager )
{
	CLua* const p_c_etyLuaScript			= get_GameStatemanager()			->get_LuaScript();

	unsigned int	uiScreen_Height			= p_c_etyCurrentGamesettingManager	->get_Videomode().height;
	unsigned int	uiScreen_Width			= p_c_etyCurrentGamesettingManager	->get_Videomode().width;

	std::string		strLanguage				= p_c_etyCurrentGamesettingManager	->get_Language();

	sf::VideoMode	c_sfCurrentVideomode	= p_c_etyCurrentGamesettingManager	->get_Videomode();
	sf::Font		c_sfCurrentFont			= p_c_etyCurrentRessourceManager	->get_Font("Standard.ttf");
	mp_c_etyDialogManager->set_StandardFont(c_sfCurrentFont);

	mp_c_ActualGamesettingsManager			= p_c_etyCurrentGamesettingManager;

	p_c_etyLuaScript->init_Lua();
	p_c_etyLuaScript->start_Script("Initialisation/Gamestates/Language.lua");

	enum EventType::en_etyEventType en_etyEventType = EventType::enNONE;
	std::map<enum EventType::en_etyEventType, p_Function> mapEventTypeFunction;

	////////////////////////////////////////////*GraphicMenu ANFANG*////////////////////////////////////////////

	ety::CDialog* p_c_etyDialogGraphicMenu = new CDialog(
		"GraphicOptionsMenu", p_c_etyCurrentRessourceManager->get_Texture( "OptionenBackgroundAlpha.png" ), 716.25, 711.f, sf::Vector2f( -43, -36 ), 
		sf::IntRect(sf::Vector2i( 0, 0 ), sf::Vector2i( 955, 948 )), mp_c_etyDialogManager, c_sfCurrentVideomode
		);

	////////////////////////////////////////////*Buttons ANFANG*////////////////////////////////////////////

	p_c_etyDialogGraphicMenu->createDialogitem_Button(
		"GraphicOptionsBackButton", p_c_etyCurrentRessourceManager->get_Texture( "Zurück.png" ), 35.25f, 36.75f, sf::Vector2f( 636.f, -579.75 ), 
		sf::IntRect(sf::Vector2i( 100, 0 ), sf::Vector2i( 47, 49 ))
		);

	CButton* p_c_etyButtonTmp = p_c_etyDialogGraphicMenu->get_DialogitemByCustomID<CButton*>("GraphicOptionsBackButton");
	p_c_etyButtonTmp->set_HoverSprite_Width(c_sfCurrentVideomode.width*float(75.f/1680.f));
	p_c_etyButtonTmp->set_HoverSprite_Height(c_sfCurrentVideomode.height*float(75.f/1050.f));
	p_c_etyButtonTmp->set_HoverSprite_SubRect(sf::IntRect(0, 0, 100, 100), true);

	//////////////////////////EVENTS/////////////////////////////////
	en_etyEventType = EventType::enMOUSELEFTRELEASED;
	mapEventTypeFunction[en_etyEventType] = &event_exitGraphicOptionsMenu;

	m_EventMap["GraphicOptionsBackButton"] = mapEventTypeFunction;
	mapEventTypeFunction.clear();
	//////////////////////////EVENTS/////////////////////////////////


	p_c_etyDialogGraphicMenu->createDialogitem_Button(
		"GraphicOptionsSaveButton", p_c_etyCurrentRessourceManager->get_Texture( "Diskette.png" ), 37.5f, 37.5f, sf::Vector2f( 580.5f, -631.f ), 
		sf::IntRect(sf::Vector2i( 141 ,0 ), sf::Vector2i( 50, 50 ))
		);

	p_c_etyButtonTmp = p_c_etyDialogGraphicMenu->get_DialogitemByCustomID<CButton*>("GraphicOptionsSaveButton");
	p_c_etyButtonTmp->set_HoverSprite_Width(c_sfCurrentVideomode.width*float(105.75f/1680.f));
	p_c_etyButtonTmp->set_HoverSprite_Height(c_sfCurrentVideomode.height*float(106.f/1050.f));
	p_c_etyButtonTmp->set_HoverSprite_SubRect(sf::IntRect(0, 0, 141, 141), true);

	//////////////////////////EVENTS/////////////////////////////////
	mapEventTypeFunction[en_etyEventType] = &event_applyGraphicOptions;

	m_EventMap["GraphicOptionsSaveButton"] = mapEventTypeFunction;
	mapEventTypeFunction.clear();
	//////////////////////////EVENTS/////////////////////////////////

	////////////////////////////////////////////*Buttons ENDE*////////////////////////////////////////////

	////////////////////////////////////////////*Checkboxes ANFANG*////////////////////////////////////////////

	p_c_etyDialogGraphicMenu->createDialogitem_Checkbox(	
		"GraphicOptionsFullscreenCheckbox", p_c_etyCurrentRessourceManager->get_Texture( "MenuCheckbox.png" ), p_c_etyCurrentGamesettingManager->get_FullscreenStatus(), 60.f, 54.f, sf::Vector2f( 505.f, -320.f ), 
		sf::IntRect(sf::Vector2i( 0, 0 ), sf::Vector2i( 60, 54 ))
		);

	p_c_etyDialogGraphicMenu->createDialogitem_Checkbox(	
		"GraphicOptionsVerticalSyncCheckbox", p_c_etyCurrentRessourceManager->get_Texture( "MenuCheckbox.png" ), p_c_etyCurrentGamesettingManager	->get_VerticalSyncStatus(), 60.f, 54.f, sf::Vector2f( 505.f, -400.f ), 
		sf::IntRect(sf::Vector2i( 0, 0 ), sf::Vector2i( 60, 54 ))
		);

	p_c_etyDialogGraphicMenu->createDialogitem_Checkbox(	
		"GraphicOptionsWindowCursorCheckbox", p_c_etyCurrentRessourceManager->get_Texture( "MenuCheckbox.png" ), p_c_etyCurrentGamesettingManager->get_WindowsCursorStatus(), 60.f, 54.f, sf::Vector2f( 505.f, -480.f ), 
		sf::IntRect(sf::Vector2i( 0, 0 ), sf::Vector2i( 60, 54 ))
		);

	////////////////////////////////////////////*Checkboxes ENDE*////////////////////////////////////////////

	////////////////////////////////////////////*ComboBoxes ANFANG*////////////////////////////////////////////
	std::vector<sf::VideoMode> vectorAvailableVideomodes = sf::VideoMode::getFullscreenModes();

	std::vector<sf::VideoMode>::iterator it = vectorAvailableVideomodes.begin();
	std::list<std::string>* p_listResolutionComboBoxCaptions;
	p_listResolutionComboBoxCaptions = new std::list<std::string>();

	unsigned int uiCurrentSelectedEntry = 0;
	unsigned int uiEntriesCount			= 0;

	for( unsigned int iLoop = 0; iLoop < vectorAvailableVideomodes.size() ; iLoop++, uiEntriesCount++, it++)
	{
		if( (*it).width == c_sfCurrentVideomode.width && (*it).height == c_sfCurrentVideomode.height )
		{
			uiCurrentSelectedEntry = iLoop;
		}

		std::string strVideomode = "";
		std::stringstream ss;

		ss << (*it).width;
		strVideomode = ss.str();
		ss << "x";
		strVideomode = ss.str();
		ss << (*it).height;
		strVideomode = ss.str();
		
		strVideomode = ss.str();

		p_listResolutionComboBoxCaptions->push_back(strVideomode);

		if( (*it).width == 800 && (*it).height == 600 )
		{
			break;
		}
	}

	p_c_etyDialogGraphicMenu->createDialogitem_ComboBox(	 
		"GraphicOptionsResolutionComboBox", p_c_etyCurrentRessourceManager->get_Texture( "StandardComboBoxSetAlphaSCRBTest.png" ), 200.f, 50.f, sf::Vector2f( 365.f, -245.f ), 
		sf::IntRect(sf::Vector2i( 0, 00 ), sf::Vector2i( 200, 50 )), ety::Color( 85.f, 85.f, 85.f ), ety::Color( 8.f, 201.f, 206.f ), 20, 0.22f
		);
		
	CComboBox* p_c_etyComboBoxTmp = p_c_etyDialogGraphicMenu->get_DialogitemByCustomID<CComboBox*>("GraphicOptionsResolutionComboBox");
	p_c_etyComboBoxTmp->set_Localization(false);
	sf::Vector2f c_sfVector2fNewCaptionPosition = p_c_etyComboBoxTmp->get_HeaderBox()->get_CaptionLabel()->get_Position();
	c_sfVector2fNewCaptionPosition.x			-=	(p_c_etyComboBoxTmp->get_Width() * 0.22f)/2;
	p_c_etyComboBoxTmp->get_HeaderBox()->get_CaptionLabel()->set_Position(c_sfVector2fNewCaptionPosition);

	p_c_etyComboBoxTmp->set_UnfoldedEntries(8);
	p_c_etyComboBoxTmp->create_Scrollbar(sf::IntRect(sf::Vector2i(0, 100), sf::Vector2i(50,200)));
	p_c_etyComboBoxTmp->add_ListEntries(*p_listResolutionComboBoxCaptions);
	
	////////////////////////////////////////////*ComboBoxes ENDE*////////////////////////////////////////////

	////////////////////////////////////////////*Labels ANFANG*////////////////////////////////////////////
	p_c_etyDialogGraphicMenu->createDialogitem_Label(	
		"GraphicOptionsTitleLabel", p_c_etyLuaScript->get_TableString( "GraphicOptionsTitleLabel", strLanguage ), 32.f, ety::Color( 255.f, 255.f, 255.f ), sf::Vector2f( 20, -140 )
		);

	CLabel* p_c_etyLabelTmp = p_c_etyDialogGraphicMenu->get_DialogitemByCustomID<CLabel*>("GraphicOptionsTitleLabel");
	p_c_etyLabelTmp->set_Anchor(Anchor::enALIGNEDMIDTOP);

	p_c_etyDialogGraphicMenu->createDialogitem_Label(	
		"GraphicOptionsResolutionLabel", p_c_etyLuaScript->get_TableString( "GraphicOptionsResolutionLabel", strLanguage ), 24.f, ety::Color( 85.f, 85.f, 85.f ), sf::Vector2f( 107.75f, -255.f )
		);

	p_c_etyDialogGraphicMenu->createDialogitem_Label(	
		"GraphicOptionsFullscreenLabel", p_c_etyLuaScript->get_TableString( "GraphicOptionsFullscreenLabel", strLanguage ), 24.f, ety::Color( 85.f, 85.f, 85.f ), sf::Vector2f( 107.75f, -335.f )
		);

	p_c_etyDialogGraphicMenu->createDialogitem_Label(	
		"GraphicOptionsVerticalsyncLabel", p_c_etyLuaScript->get_TableString( "GraphicOptionsVerticalsyncLabel", strLanguage ), 24.f, ety::Color( 85.f, 85.f, 85.f ), 
		sf::Vector2f( 107.75f, -415.f )
		);

	p_c_etyDialogGraphicMenu->createDialogitem_Label(	
		"GraphicOptionsWindowsCursorLabel", p_c_etyLuaScript->get_TableString( "GraphicOptionsWindowsCursorLabel", strLanguage ), 24.f, ety::Color( 85.f, 85.f, 85.f ), 
		sf::Vector2f( 107.75f, -495.f )
		);

	////////////////////////////////////////////*Labels ENDE*////////////////////////////////////////////

	////////////////////////////////////////////*Hinzufügen der Dialoge ANFANG*////////////////////////////////////////////

	p_c_etyLuaScript->close_Lua();
}

const ety::GameStateRunning::en_etyGameStateRunning			ety::CGraphicOptionState::handle_GameStateEvents			( const sf::Event& sfEventLastEvent  )
{
	CDialogitem* p_c_etyDialogitemEvent = mp_c_etyDialogManager->get_MouseEventDialogitem();

	if(sfEventLastEvent.type == sf::Event::KeyReleased)
	{
		if(sfEventLastEvent.key.code == sf::Keyboard::Escape)
		{
			return event_exitGraphicOptionsMenu(1, mp_c_etyDialogManager);
		}
	}

	sf::Event c_sfEvent = sfEventLastEvent;
	mp_c_etyDialogManager->handle_Events(c_sfEvent);
	
	if(p_c_etyDialogitemEvent != NULL)
	{
		p_Function p_FunctionEvent = get_EventFunction(p_c_etyDialogitemEvent->get_CustomID(), c_sfEvent);
		std::string strCustomID = p_c_etyDialogitemEvent->get_CustomID();

		if(p_FunctionEvent != NULL)
		{
			return p_FunctionEvent(1, mp_c_etyDialogManager);
		}
	}


	return ety::GameStateRunning::enTRUE;
}

	
ety::CGamesettings* const									ety::CGraphicOptionState::get_GamesettingsManager			( void )
{
	return mp_c_ActualGamesettingsManager;
}


ety::GameStateRunning::en_etyGameStateRunning				ety::CGraphicOptionState::event_applyGraphicOptions			( int iAmount, ... )
{
	va_ArgumentList va_ALParameter;
    va_OpenArgumentList(va_ALParameter, iAmount);
	CDialogManager* p_c_etyDialogManager = static_cast<CDialogManager*>(va_getArgument(va_ALParameter, void*));
	va_CloseArgumentList(va_ALParameter);

	CGraphicOptionState* p_c_etyGraphicOptionState = static_cast<CGraphicOptionState*>(p_c_etyDialogManager->get_ParentGameState());
	CGamesettings* p_c_etyGamesettingsManager = p_c_etyGraphicOptionState->get_GamesettingsManager();

	if( sf::VideoMode::getFullscreenModes()[ p_c_etyDialogManager->get_DialogbyCustomID("GraphicOptionsMenu")->get_DialogitemByCustomID<CComboBox*>("GraphicOptionsResolutionComboBox")
		->get_CurrentSelectedEntrie() ] != p_c_etyGamesettingsManager->get_Videomode() || 
		p_c_etyDialogManager->get_DialogbyCustomID("GraphicOptionsMenu")->get_DialogitemByCustomID<CCheckbox*>("GraphicOptionsFullscreenCheckbox")->get_Status()
		!= p_c_etyGamesettingsManager->get_FullscreenStatus() )
	{
		p_c_etyGraphicOptionState->get_GameStatemanager()->reinit_Gamestates( sf::VideoMode::getFullscreenModes()[ p_c_etyDialogManager->get_DialogbyCustomID("GraphicOptionsMenu")
			->get_DialogitemByCustomID<CComboBox*>("GraphicOptionsResolutionComboBox")->get_CurrentSelectedEntrie() ], 
			p_c_etyDialogManager->get_DialogbyCustomID("GraphicOptionsMenu")->get_DialogitemByCustomID<CCheckbox*>("GraphicOptionsFullscreenCheckbox")->get_Status() );
	}

	if( p_c_etyDialogManager->get_DialogbyCustomID("GraphicOptionsMenu")->get_DialogitemByCustomID<CCheckbox*>("GraphicOptionsWindowCursorCheckbox")->get_Status() 
		!= p_c_etyGamesettingsManager->get_WindowsCursorStatus() )
	{
		p_c_etyGamesettingsManager->set_WindowsCursorStatus( p_c_etyDialogManager->get_DialogbyCustomID("GraphicOptionsMenu")
			->get_DialogitemByCustomID<CCheckbox*>("GraphicOptionsWindowCursorCheckbox")->get_Status() );
		p_c_etyGamesettingsManager->apply_Settings( false, true, true, false );
	}

	if( p_c_etyDialogManager->get_DialogbyCustomID("GraphicOptionsMenu")->get_DialogitemByCustomID<CCheckbox*>("GraphicOptionsVerticalSyncCheckbox")->get_Status() 
		!= p_c_etyGamesettingsManager->get_VerticalSyncStatus() )
	{
		p_c_etyGamesettingsManager->set_VerticalSyncStatus( p_c_etyDialogManager->get_DialogbyCustomID("GraphicOptionsMenu")
			->get_DialogitemByCustomID<CCheckbox*>("GraphicOptionsVerticalSyncCheckbox")->get_Status() );
		p_c_etyGamesettingsManager->apply_Settings( false, true, false, false );
	}

	return ety::GameStateRunning::enTRUE;
}
ety::GameStateRunning::en_etyGameStateRunning				ety::CGraphicOptionState::event_exitGraphicOptionsMenu		( int iAmount, ... )
{
	va_ArgumentList va_ALParameter;
    va_OpenArgumentList(va_ALParameter, iAmount);
	CDialogManager* p_c_etyDialogManager = static_cast<CDialogManager*>(va_getArgument(va_ALParameter, void*));
	va_CloseArgumentList(va_ALParameter);

	p_c_etyDialogManager->get_ParentGameState()->get_GameStatemanager()->popback_GameState();

	return ety::GameStateRunning::enFALSE;
}

