#include "CAudioOptionState.hpp"
#include "CGameStateManager.hpp"

#include "CButton.hpp"
#include "CLabel.hpp"
#include "CSlideControl.hpp"

//Damit alle Dialogitems in dem State verwendet werden können

															ety::CAudioOptionState::CAudioOptionState				( const std::string& strStateName )
															: CDialogGameState											( strStateName )
															,mp_c_ActualGamesettingsManager							( NULL )
{
}
															ety::CAudioOptionState::~CAudioOptionState				( void )
{
}

void														ety::CAudioOptionState::on_Enter						( ety::CRessourceManager* const p_c_etyCurrentRessourceManager, ety::CGamesettings* const p_c_etyCurrentGamesettingManager )
{
}
void														ety::CAudioOptionState::on_Exit							( ety::CRessourceManager* const p_c_etyCurrentRessourceManager, ety::CGamesettings* const p_c_etyCurrentGamesettingManager )
{
}

void														ety::CAudioOptionState::init_GameState					( ety::CRessourceManager* const p_c_etyCurrentRessourceManager, ety::CGamesettings* const p_c_etyCurrentGamesettingManager )
{
	CLua* const p_c_etyLuaScript			= get_GameStatemanager()			->get_LuaScript();

	unsigned int	uiScreen_Height			= p_c_etyCurrentGamesettingManager	->get_Videomode().height;
	unsigned int	uiScreen_Width			= p_c_etyCurrentGamesettingManager	->get_Videomode().width;

	std::string		strLanguage				= p_c_etyCurrentGamesettingManager	->get_Language();

	sf::VideoMode	c_sfCurrentVideomode	= p_c_etyCurrentGamesettingManager	->get_Videomode();
	sf::Font		c_sfCurrentFont			= p_c_etyCurrentRessourceManager	->get_Font("Standard.ttf");

	mp_c_ActualGamesettingsManager			= p_c_etyCurrentGamesettingManager;

	mp_c_etyDialogManager->set_GamesettingsManager	( p_c_etyCurrentGamesettingManager );
	mp_c_etyDialogManager->set_StandardFont			( c_sfCurrentFont );

	p_c_etyLuaScript->init_Lua();
	p_c_etyLuaScript->start_Script("Initialisation/Gamestates/Language.lua");

	enum EventType::en_etyEventType en_etyEventType = EventType::enNONE;
	std::map<enum EventType::en_etyEventType, p_Function> mapEventTypeFunction;

	////////////////////////////////////////////*AudioOption ANFANG*///////////////////////////////////////////

	ety::CDialog* p_c_etyDialogAudioOption = new CDialog( 
		"AudioOptionsMenu", p_c_etyCurrentRessourceManager->get_Texture( "OptionenBackgroundAlpha.png" ),  716.25, 711., sf::Vector2f( -43, -36 ), 
		sf::IntRect(sf::Vector2i( 0, 0 ), sf::Vector2i( 955, 948 )), mp_c_etyDialogManager, c_sfCurrentVideomode					
		);

	////////////////////////////////////////////*Buttons ANFANG*////////////////////////////////////////////

	p_c_etyDialogAudioOption->createDialogitem_Button(
		"AudioOptionsBackButton", p_c_etyCurrentRessourceManager->get_Texture( "Zurück.png" ), 35.25f, 36.75f, sf::Vector2f( 636.f, -579.75 ), 
		sf::IntRect(sf::Vector2i( 100, 0 ), sf::Vector2i( 47, 49 ))
		);

	CButton* p_c_etyButtonTmp = p_c_etyDialogAudioOption->get_DialogitemByCustomID<CButton*>("AudioOptionsBackButton");
	p_c_etyButtonTmp->set_HoverSprite_Width(c_sfCurrentVideomode.width*float(75.f/1680.f));
	p_c_etyButtonTmp->set_HoverSprite_Height(c_sfCurrentVideomode.height*float(75.f/1050.f));
	p_c_etyButtonTmp->set_HoverSprite_SubRect(sf::IntRect(0, 0, 100, 100), true);

	//////////////////////////EVENTS/////////////////////////////////
	en_etyEventType = EventType::enMOUSELEFTRELEASED;
	mapEventTypeFunction[en_etyEventType] = &event_exitAudioOptionsMenu;

	m_EventMap["AudioOptionsBackButton"] = mapEventTypeFunction;
	mapEventTypeFunction.clear();
	//////////////////////////EVENTS/////////////////////////////////


	p_c_etyDialogAudioOption->createDialogitem_Button(
		"AudioOptionsSaveButton", p_c_etyCurrentRessourceManager->get_Texture( "Diskette.png" ), 37.5f, 37.5f, sf::Vector2f( 580.5f, -631.f ), 
		sf::IntRect(sf::Vector2i( 141 ,0 ), sf::Vector2i( 50, 50 ))
		);

	p_c_etyButtonTmp = p_c_etyDialogAudioOption->get_DialogitemByCustomID<CButton*>("AudioOptionsSaveButton");
	p_c_etyButtonTmp->set_HoverSprite_Width(c_sfCurrentVideomode.width*float(105.75f/1680.f));
	p_c_etyButtonTmp->set_HoverSprite_Height(c_sfCurrentVideomode.height*float(106.f/1050.f));
	p_c_etyButtonTmp->set_HoverSprite_SubRect(sf::IntRect(0, 0, 141, 141), true);

	//////////////////////////EVENTS/////////////////////////////////
	mapEventTypeFunction[en_etyEventType] = &event_applyAudioSettings;

	m_EventMap["AudioOptionsSaveButton"] = mapEventTypeFunction;
	mapEventTypeFunction.clear();
	//////////////////////////EVENTS/////////////////////////////////
		
	////////////////////////////////////////////*Buttons ENDE*////////////////////////////////////////////

	////////////////////////////////////////////*Labels ANFANG*////////////////////////////////////////////
	p_c_etyDialogAudioOption->createDialogitem_Label(
		"AudioOptionsTitleLabel", p_c_etyLuaScript->get_TableString( "AudioOptionsTitleLabel", strLanguage ), 32.f, ety::Color( 255.f, 255.f, 255.f ), sf::Vector2f( 20, -140 )
		);

	CLabel* p_c_etyLabelTmp = p_c_etyDialogAudioOption->get_DialogitemByCustomID<CLabel*>("AudioOptionsTitleLabel");
	p_c_etyLabelTmp->set_Anchor(Anchor::enALIGNEDMIDTOP);

	p_c_etyDialogAudioOption->createDialogitem_Label(	
		"AudioOptionsMusicVolumeLabel", p_c_etyLuaScript->get_TableString( "AudioOptionsMusicVolumeLabel", strLanguage ), 18.f,ety::Color( 85.f, 85.f, 85.f ), sf::Vector2f( 377.75f, -245.f )
		);

	p_c_etyLabelTmp = p_c_etyDialogAudioOption->get_DialogitemByCustomID<CLabel*>("AudioOptionsMusicVolumeLabel");
	p_c_etyLabelTmp->set_AnchorCentered(true);

	p_c_etyDialogAudioOption->createDialogitem_Label(	
		"AudioOptionsSoundVolumeLabel", p_c_etyLuaScript->get_TableString( "AudioOptionsSoundVolumeLabel", strLanguage ), 18.f, ety::Color( 85.f, 85.f, 85.f ), sf::Vector2f( 377.75f, -325.f )
		);

	p_c_etyLabelTmp = p_c_etyDialogAudioOption->get_DialogitemByCustomID<CLabel*>("AudioOptionsSoundVolumeLabel");
	p_c_etyLabelTmp->set_AnchorCentered(true);

	p_c_etyDialogAudioOption->createDialogitem_Label(	
		"AudioOptionsMasterVolumeLabel", p_c_etyLuaScript->get_TableString( "AudioOptionsMasterVolumeLabel", strLanguage ), 18.f, ety::Color( 85.f, 85.f, 85.f), sf::Vector2f( 377.75f, -405.f )
		);

	p_c_etyLabelTmp = p_c_etyDialogAudioOption->get_DialogitemByCustomID<CLabel*>("AudioOptionsMasterVolumeLabel");
	p_c_etyLabelTmp->set_AnchorCentered(true);

	////////////////////////////////////////////*Labels ENDE*////////////////////////////////////////////

	////////////////////////////////////////////*SlideControls ANFANG*////////////////////////////////////////////

	p_c_etyDialogAudioOption->createDialogitem_SlideControl( 
		"AudioOptionsMusicVolumeSlideControl", p_c_etyCurrentRessourceManager->get_Texture( "SlideControl.png" ), 500.f, 30.f, sf::Vector2f( 132.f, -262.f ), sf::Vector2f( 0.f, 100.f ),
		float( p_c_etyCurrentGamesettingManager->get_Musicvolume() ), sf::IntRect(sf::Vector2i( 0, 0 ), sf::Vector2i( 619, 52 ))
		);

	p_c_etyDialogAudioOption->createDialogitem_SlideControl( 
		"AudioOptionsSoundVolumeSlideControl", p_c_etyCurrentRessourceManager->get_Texture( "SlideControl.png" ), 500.f, 30.f, sf::Vector2f( 132.f, -342.f ), sf::Vector2f( 0.f, 100.f ),
		float( p_c_etyCurrentGamesettingManager->get_Soundvolume() ), sf::IntRect(sf::Vector2i( 0, 0 ), sf::Vector2i( 619, 52 ))
		);

	p_c_etyDialogAudioOption->createDialogitem_SlideControl( 
		"AudioOptionsMasterVolumeSlideControl", p_c_etyCurrentRessourceManager->get_Texture( "SlideControl.png" ), 500.f, 30.f, sf::Vector2f( 132.f, -422.f ), sf::Vector2f( 0.f, 100.f ),
		float( p_c_etyCurrentGamesettingManager->get_Mastervolume() ), sf::IntRect(sf::Vector2i( 0, 0 ), sf::Vector2i( 619, 52 ))
		);
		
	
	CSlideControl* p_c_etySlideControlTmp = p_c_etyDialogAudioOption->get_DialogitemByCustomID<CSlideControl*>("AudioOptionsMusicVolumeSlideControl");
	p_c_etySlideControlTmp->create_ValueDisplay(false, true, 18.f, ety::Color( 255.f, 255.f, 255.f ), Anchor::enMID, true, sf::Vector2f( 0.f, 5.f ));

	p_c_etySlideControlTmp = p_c_etyDialogAudioOption->get_DialogitemByCustomID<CSlideControl*>("AudioOptionsSoundVolumeSlideControl");
	p_c_etySlideControlTmp->create_ValueDisplay(false, true, 18.f, ety::Color( 255.f, 255.f, 255.f ), Anchor::enMID, true, sf::Vector2f( 0.f, 5.f ));

	p_c_etySlideControlTmp = p_c_etyDialogAudioOption->get_DialogitemByCustomID<CSlideControl*>("AudioOptionsMasterVolumeSlideControl");
	p_c_etySlideControlTmp->create_ValueDisplay(false, true, 18.f, ety::Color( 255.f, 255.f, 255.f ), Anchor::enMID, true, sf::Vector2f( 0.f, 5.f ));

	////////////////////////////////////////////*SlideControls ENDE*////////////////////////////////////////////

	////////////////////////////////////////////*AudioOption ENDE*///////////////////////////////////////////

	p_c_etyLuaScript->close_Lua();
}

const ety::GameStateRunning::en_etyGameStateRunning			ety::CAudioOptionState::handle_GameStateEvents			( const sf::Event& sfEventLastEvent  )
{
	CDialogitem* p_c_etyDialogitemEvent = mp_c_etyDialogManager->get_MouseEventDialogitem();

	if(sfEventLastEvent.type == sf::Event::KeyReleased)
	{
		if(sfEventLastEvent.key.code == sf::Keyboard::Escape)
		{
			return event_exitAudioOptionsMenu(1, mp_c_etyDialogManager);
		}
	}

	sf::Event c_sfEvent = sfEventLastEvent;
	mp_c_etyDialogManager->handle_Events(c_sfEvent);
	
	if(p_c_etyDialogitemEvent != NULL)
	{
		p_Function p_FunctionEvent = get_EventFunction(p_c_etyDialogitemEvent->get_CustomID(), c_sfEvent);
		std::string strCustomID = p_c_etyDialogitemEvent->get_CustomID();

		if(p_FunctionEvent != NULL)
		{
			return p_FunctionEvent(1, mp_c_etyDialogManager);
		}
	}

	return ety::GameStateRunning::enTRUE;
}


ety::CGamesettings*	const									ety::CAudioOptionState::get_GamesettingsManager			( void )
{
	return mp_c_ActualGamesettingsManager;
}


ety::GameStateRunning::en_etyGameStateRunning				ety::CAudioOptionState::event_applyAudioSettings		( int iAmount, ... )
{
	va_ArgumentList va_ALParameter;
    va_OpenArgumentList(va_ALParameter, iAmount);
	CDialogManager* p_c_etyDialogManager = static_cast<CDialogManager*>(va_getArgument(va_ALParameter, void*));
	va_CloseArgumentList(va_ALParameter);

	CGamesettings* p_c_etyGamesettingsmanager = static_cast<CAudioOptionState*>(p_c_etyDialogManager->get_ParentGameState())->get_GamesettingsManager();
	p_c_etyGamesettingsmanager->set_Musicvolume(unsigned short(p_c_etyDialogManager->get_DialogbyCustomID("AudioOptionsMenu")
		->get_DialogitemByCustomID<ety::CSlideControl*>("AudioOptionsMusicVolumeSlideControl")->get_CurrentValue()));
	p_c_etyGamesettingsmanager->set_Soundvolume(unsigned short(p_c_etyDialogManager->get_DialogbyCustomID("AudioOptionsMenu")
		->get_DialogitemByCustomID<ety::CSlideControl*>("AudioOptionsSoundVolumeSlideControl")->get_CurrentValue()));
	p_c_etyGamesettingsmanager->set_Mastervolume(unsigned short(p_c_etyDialogManager->get_DialogbyCustomID("AudioOptionsMenu")
		->get_DialogitemByCustomID<ety::CSlideControl*>("AudioOptionsMasterVolumeSlideControl")->get_CurrentValue()));

	p_c_etyGamesettingsmanager->apply_Settings(false,false,false,true);

	return ety::GameStateRunning::enTRUE;
}
ety::GameStateRunning::en_etyGameStateRunning				ety::CAudioOptionState::event_exitAudioOptionsMenu		( int iAmount, ... )
{
	va_ArgumentList va_ALParameter;
    va_OpenArgumentList(va_ALParameter, iAmount);
	CDialogManager* p_c_etyDialogManager = static_cast<CDialogManager*>(va_getArgument(va_ALParameter, void*));
	va_CloseArgumentList(va_ALParameter);

	p_c_etyDialogManager->get_ParentGameState()->get_GameStatemanager()->popback_GameState();

	return ety::GameStateRunning::enFALSE;
}
