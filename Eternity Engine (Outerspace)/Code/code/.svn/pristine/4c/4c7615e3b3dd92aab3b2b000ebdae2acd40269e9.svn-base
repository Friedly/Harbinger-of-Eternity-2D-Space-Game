#include "CMovableComponent.hpp"
#include "CRenderComponent.hpp"
#include "CCameraComponent.hpp"
#include "CAttributeComponent.hpp"
#include "CItemModulesComponent.hpp"

#include "CEngine.hpp"

#include "CEntity.hpp"

#include "CMouse.hpp"


#include "CWorld.hpp"
#include <iostream>

//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//

							ety::CMovableComponent::CMovableComponent								( void )
							{
							}
							ety::CMovableComponent::~CMovableComponent								( void )
							{
							}
			
			void			ety::CMovableComponent::continue_Movement								( const sf::Uint32& uiFrameTime )
			{
				ety::CRenderComponent*		p_c_etyRenderComponent		= mp_c_Owner->get_Component<ety::CRenderComponent>( "RenderComponent" );
				ety::CAttributeComponent*	p_c_etyAttributeComponent	= mp_c_Owner->get_Component<ety::CAttributeComponent>( "AttributeComponent" );

				if( p_c_etyRenderComponent != NULL && p_c_etyAttributeComponent != NULL )
				{
					sf::Vector2f c_sfVectorVelocity = *(p_c_etyAttributeComponent->m_c_etyAttributes.get_Attribute<sf::Vector2f>( "c_sfVectorVelocity" ) );

					p_c_etyRenderComponent->get_Appearance()->move( c_sfVectorVelocity.x * ( static_cast<float>( uiFrameTime ) / 1000.f ), c_sfVectorVelocity.y * ( static_cast<float>( uiFrameTime ) / 1000.f ) );
				}
			}

			void			ety::CMovableComponent::rotate_ToAngle									( float fTargetAngle, const sf::Uint32& uiFrameTime )
			{		
				ety::CRenderComponent* p_c_etyRenderComponent = mp_c_Owner->get_Component<ety::CRenderComponent>("RenderComponent");
				
				if( p_c_etyRenderComponent != NULL )
				{
					const float fActualAngle = p_c_etyRenderComponent->get_Angle();
		
					if( fTargetAngle < 0 )
					{
						fTargetAngle += 360;
					}

					//Movement: Rotation
					if( ( fActualAngle + 3.f ) < fTargetAngle || ( fActualAngle - 3.f ) > fTargetAngle )
					{
						if( fActualAngle < fTargetAngle )
						{
							if( abs( fActualAngle - fTargetAngle ) > 180) 
							{ 
								rotate_CounterClockwise( uiFrameTime );
							} 
							else 
							{ 
								rotate_Clockwise( uiFrameTime );
							} 
						}
						else if( fActualAngle > fTargetAngle )
						{
							if( abs( fActualAngle - fTargetAngle ) > 180) 
							{ 
								rotate_Clockwise( uiFrameTime );
							} 
							else 
							{ 
								rotate_CounterClockwise( uiFrameTime );
							} 
						}
					}
				}
			}
			void			ety::CMovableComponent::rotate_Clockwise								( const sf::Uint32& uiFrameTime )
			{
				ety::CRenderComponent* p_c_etyRenderComponent = mp_c_Owner->get_Component<ety::CRenderComponent>("RenderComponent");
				
				if( p_c_etyRenderComponent != NULL )
				{
					const float fRotationSpeed = *(mp_c_Owner->get_Component<ety::CAttributeComponent>( "AttributeComponent" )->m_c_etyAttributes.get_Attribute<float>( "fRotationSpeed" ) );
					
					float fActualAngle = p_c_etyRenderComponent->get_Angle();

					const float test = fRotationSpeed * ( static_cast<float>( uiFrameTime ) / 1000.f );

					fActualAngle += test;

					if( fActualAngle > 360.f )
					{
						fActualAngle -= 360.f;
					}
					else if( fActualAngle < 0.f )
					{
						fActualAngle += 360.f;
					}

					p_c_etyRenderComponent->set_Angle( fActualAngle );
				}
			}
			void			ety::CMovableComponent::rotate_CounterClockwise							( const sf::Uint32& uiFrameTime )
			{
				ety::CRenderComponent* p_c_etyRenderComponent = mp_c_Owner->get_Component<ety::CRenderComponent>("RenderComponent");
				
				if( p_c_etyRenderComponent != NULL )
				{
					const float fRotationSpeed = *(mp_c_Owner->get_Component<ety::CAttributeComponent>( "AttributeComponent" )->m_c_etyAttributes.get_Attribute<float>( "fRotationSpeed" ) );	
					
					float fActualAngle = p_c_etyRenderComponent->get_Angle();

					fActualAngle -= fRotationSpeed * ( static_cast<float>( uiFrameTime ) / 1000.f );

					if( fActualAngle > 360.f )
					{
						fActualAngle -= 360.f;
					}
					else if( fActualAngle < 0.f )
					{
						fActualAngle += 360.f;
					}

					p_c_etyRenderComponent->set_Angle( fActualAngle );
				}
			}

const		std::string		ety::CMovableComponent::get_FamilyID									( void )
			{
				return "MovableComponent";
			}

//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//

							ety::CMovableSpaceshipComponent::CMovableSpaceshipComponent				( void )
							{
							}
							ety::CMovableSpaceshipComponent::~CMovableSpaceshipComponent			( void )
							{
							}

			void			ety::CMovableSpaceshipComponent::move_ToPosition						( const sf::Vector2f& c_sfVectorPosition )
			{
				sf::Vector2f	c_sfVector2fNPCPosition		=	this->get_Owner()->get_Component<CRenderComponent>("RenderComponent")->get_Position();

				if(c_sfVector2fNPCPosition.x > c_sfVectorPosition.x)
				{
					accelerate_Left(m_uiFrameTime);
					std::cout << "X: " << c_sfVector2fNPCPosition.x << "\tY: " << c_sfVector2fNPCPosition.y << "      LEFT" << std::endl;
				}
				else if(c_sfVector2fNPCPosition.x < c_sfVectorPosition.x)
				{
					accelerate_Right(m_uiFrameTime);
					std::cout << "X: " << c_sfVector2fNPCPosition.x << "\tY: " << c_sfVector2fNPCPosition.y << "      RIGHT" << std::endl;
				}
				else if(c_sfVector2fNPCPosition.x == c_sfVectorPosition.x)
				{
					stop_Movement();
					std::cout << "STOP!!" << std::endl;
					//return ;
				}

				
				continue_Movement( m_uiFrameTime );
			}

			void			ety::CMovableSpaceshipComponent::accelerate_Forward						( const sf::Uint32& uiFrameTime )
			{
				ety::CRenderComponent*		p_c_etyRenderComponent		= mp_c_Owner->get_Component<ety::CRenderComponent>		( "RenderComponent"			);
				ety::CAttributeComponent*	p_c_etyAttributeComponent	= mp_c_Owner->get_Component<ety::CAttributeComponent>	( "AttributeComponent"		);
				ety::CItemModulesComponent* p_c_etyItemModulesComponent = mp_c_Owner->get_Component<ety::CItemModulesComponent>	( "ItemModulesComponent"	);
				
				if( p_c_etyRenderComponent != NULL && p_c_etyAttributeComponent != NULL && p_c_etyItemModulesComponent != NULL )
				{
					ety::CEngine* p_c_etyEntityEngine = dynamic_cast<ety::CEngine*>( p_c_etyItemModulesComponent->get_EquipmentFromModule( ety::ModuleType::enENGINE ) );

					if( p_c_etyEntityEngine != NULL )
					{
						sf::Vector2f c_sfVectorVelocity		= *(p_c_etyAttributeComponent->m_c_etyAttributes.get_Attribute<sf::Vector2f>( "c_sfVectorVelocity" ) );
						sf::Vector2f c_sfVectorDirection	= p_c_etyRenderComponent->get_Direction();
						
						const float fAcceleration = p_c_etyEntityEngine->get_Thrust() / *(p_c_etyAttributeComponent->m_c_etyAttributes.get_Attribute<float>( "fMass" ) );

						c_sfVectorVelocity += c_sfVectorDirection * fAcceleration * ( static_cast<float>( uiFrameTime ) / 1000.f );

						if( c_sfVectorVelocity.x >= p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.x = p_c_etyEntityEngine->get_MaximalVelocity();
						}
						else if( c_sfVectorVelocity.x <= -p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.x = -p_c_etyEntityEngine->get_MaximalVelocity();
						}

						if( c_sfVectorVelocity.y >= p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.y = p_c_etyEntityEngine->get_MaximalVelocity();
						}
						else if( c_sfVectorVelocity.y <= -p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.y = -p_c_etyEntityEngine->get_MaximalVelocity();
						}

						p_c_etyAttributeComponent->m_c_etyAttributes.change_Attribute<sf::Vector2f>( "c_sfVectorVelocity", new sf::Vector2f( c_sfVectorVelocity ), true );
					}
				}
			}
			void			ety::CMovableSpaceshipComponent::accelerate_Backward					( const sf::Uint32& uiFrameTime )
			{
				ety::CRenderComponent*		p_c_etyRenderComponent		= mp_c_Owner->get_Component<ety::CRenderComponent>		( "RenderComponent"			);
				ety::CAttributeComponent*	p_c_etyAttributeComponent	= mp_c_Owner->get_Component<ety::CAttributeComponent>	( "AttributeComponent"		);
				ety::CItemModulesComponent* p_c_etyItemModulesComponent = mp_c_Owner->get_Component<ety::CItemModulesComponent>	( "ItemModulesComponent"	);
				
				if( p_c_etyRenderComponent != NULL && p_c_etyAttributeComponent != NULL && p_c_etyItemModulesComponent != NULL )
				{
					ety::CEngine* p_c_etyEntityEngine = dynamic_cast<ety::CEngine*>( p_c_etyItemModulesComponent->get_EquipmentFromModule( ety::ModuleType::enENGINE ) );

					if( p_c_etyEntityEngine != NULL )
					{
						sf::Vector2f c_sfVectorVelocity	 = *(p_c_etyAttributeComponent->m_c_etyAttributes.get_Attribute<sf::Vector2f>( "c_sfVectorVelocity" ) );
						sf::Vector2f c_sfVectorDirection = -p_c_etyRenderComponent->get_Direction();
						
						const float fAcceleration = p_c_etyEntityEngine->get_Thrust() / *(p_c_etyAttributeComponent->m_c_etyAttributes.get_Attribute<float>( "fMass" ) );

						c_sfVectorVelocity += c_sfVectorDirection * fAcceleration * ( static_cast<float>( uiFrameTime ) / 1000.f );

						if( c_sfVectorVelocity.x >= p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.x = p_c_etyEntityEngine->get_MaximalVelocity();
						}
						else if( c_sfVectorVelocity.x <= -p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.x = -p_c_etyEntityEngine->get_MaximalVelocity();
						}

						if( c_sfVectorVelocity.y >= p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.y = p_c_etyEntityEngine->get_MaximalVelocity();
						}
						else if( c_sfVectorVelocity.y <= -p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.y = -p_c_etyEntityEngine->get_MaximalVelocity();
						}
						p_c_etyAttributeComponent->m_c_etyAttributes.change_Attribute<sf::Vector2f>( "c_sfVectorVelocity", new sf::Vector2f( c_sfVectorVelocity ), true );
					}
				}
			}
			void			ety::CMovableSpaceshipComponent::accelerate_Left						( const sf::Uint32& uiFrameTime )
			{
				ety::CRenderComponent*		p_c_etyRenderComponent		= mp_c_Owner->get_Component<ety::CRenderComponent>		( "RenderComponent"			);
				ety::CAttributeComponent*	p_c_etyAttributeComponent	= mp_c_Owner->get_Component<ety::CAttributeComponent>	( "AttributeComponent"		);
				ety::CItemModulesComponent* p_c_etyItemModulesComponent = mp_c_Owner->get_Component<ety::CItemModulesComponent>	( "ItemModulesComponent"	);
				
				if( p_c_etyRenderComponent != NULL && p_c_etyAttributeComponent != NULL && p_c_etyItemModulesComponent != NULL )
				{
					ety::CEngine* p_c_etyEntityEngine = dynamic_cast<ety::CEngine*>( p_c_etyItemModulesComponent->get_EquipmentFromModule( ety::ModuleType::enENGINE ) );

					if( p_c_etyEntityEngine != NULL )
					{
						sf::Vector2f c_sfVectorVelocity		= *(p_c_etyAttributeComponent->m_c_etyAttributes.get_Attribute<sf::Vector2f>( "c_sfVectorVelocity" ) );
						sf::Vector2f c_sfVectorDirection	= -ety::CMath::rotate_Vector( p_c_etyRenderComponent->get_Direction(), 90.f );
						
						const float fAcceleration = p_c_etyEntityEngine->get_Thrust() / *(p_c_etyAttributeComponent->m_c_etyAttributes.get_Attribute<float>( "fMass" ) );

						c_sfVectorVelocity += c_sfVectorDirection * fAcceleration * ( static_cast<float>( uiFrameTime ) / 1000.f );

						if( c_sfVectorVelocity.x >= p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.x = p_c_etyEntityEngine->get_MaximalVelocity();
						}
						else if( c_sfVectorVelocity.x <= -p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.x = -p_c_etyEntityEngine->get_MaximalVelocity();
						}

						if( c_sfVectorVelocity.y >= p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.y = p_c_etyEntityEngine->get_MaximalVelocity();
						}
						else if( c_sfVectorVelocity.y <= -p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.y = -p_c_etyEntityEngine->get_MaximalVelocity();
						}

						p_c_etyAttributeComponent->m_c_etyAttributes.change_Attribute<sf::Vector2f>( "c_sfVectorVelocity", new sf::Vector2f( c_sfVectorVelocity ), true );
					}
				}
			}
			void			ety::CMovableSpaceshipComponent::accelerate_Right						( const sf::Uint32& uiFrameTime )
			{
				ety::CRenderComponent*		p_c_etyRenderComponent		= mp_c_Owner->get_Component<ety::CRenderComponent>		( "RenderComponent"			);
				ety::CAttributeComponent*	p_c_etyAttributeComponent	= mp_c_Owner->get_Component<ety::CAttributeComponent>	( "AttributeComponent"		);
				ety::CItemModulesComponent* p_c_etyItemModulesComponent = mp_c_Owner->get_Component<ety::CItemModulesComponent>	( "ItemModulesComponent"	);
				
				if( p_c_etyRenderComponent != NULL && p_c_etyAttributeComponent != NULL && p_c_etyItemModulesComponent != NULL )
				{
					ety::CEngine* p_c_etyEntityEngine = dynamic_cast<ety::CEngine*>( p_c_etyItemModulesComponent->get_EquipmentFromModule( ety::ModuleType::enENGINE ) );

					if( p_c_etyEntityEngine != NULL )
					{
						sf::Vector2f c_sfVectorVelocity		= *(p_c_etyAttributeComponent->m_c_etyAttributes.get_Attribute<sf::Vector2f>( "c_sfVectorVelocity" ) );
						sf::Vector2f c_sfVectorDirection	= ety::CMath::rotate_Vector( p_c_etyRenderComponent->get_Direction(), 90.f );
						
						const float fAcceleration = p_c_etyEntityEngine->get_Thrust() / *(p_c_etyAttributeComponent->m_c_etyAttributes.get_Attribute<float>( "fMass" ) );

						c_sfVectorVelocity += c_sfVectorDirection * fAcceleration * ( static_cast<float>( uiFrameTime ) / 1000.f );

						if( c_sfVectorVelocity.x >= p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.x = p_c_etyEntityEngine->get_MaximalVelocity();
						}
						else if( c_sfVectorVelocity.x <= -p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.x = -p_c_etyEntityEngine->get_MaximalVelocity();
						}

						if( c_sfVectorVelocity.y >= p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.y = p_c_etyEntityEngine->get_MaximalVelocity();
						}
						else if( c_sfVectorVelocity.y <= -p_c_etyEntityEngine->get_MaximalVelocity() )
						{
							c_sfVectorVelocity.y = -p_c_etyEntityEngine->get_MaximalVelocity();
						}

						p_c_etyAttributeComponent->m_c_etyAttributes.change_Attribute<sf::Vector2f>( "c_sfVectorVelocity", new sf::Vector2f( c_sfVectorVelocity ), true );
					}
				}
			}

			void			ety::CMovableSpaceshipComponent::stop_Movement							( void )
			{
				ety::CAttributeComponent*	p_c_etyAttributeComponent	= mp_c_Owner->get_Component<ety::CAttributeComponent>	( "AttributeComponent"		);
				p_c_etyAttributeComponent->m_c_etyAttributes.change_Attribute<sf::Vector2f>( "c_sfVectorVelocity", new sf::Vector2f( 0.f, 0.f ), true );
			}

//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//

							ety::CMovablePlayerComponent::CMovablePlayerComponent					( void )
							{
							}
							ety::CMovablePlayerComponent::~CMovablePlayerComponent					( void )
							{
							}

			void			ety::CMovablePlayerComponent::update_Component							( const sf::Uint32& uiFrameTime )
			{
				ety::CRenderComponent*			p_c_etyRenderComponent = mp_c_Owner->get_Component<ety::CRenderComponent>			("RenderComponent");
				ety::CCenteredCameraComponent*	p_c_etyCameraComponent = mp_c_Owner->get_Component<ety::CCenteredCameraComponent>	("CameraComponent");

				if( p_c_etyRenderComponent != NULL )
				{
					if( p_c_etyCameraComponent != NULL )
					{
						const sf::Vector2f c_sfVectorPosition	= p_c_etyRenderComponent->get_Position();
						const sf::Vector2f c_sfVectorTarget		= ety::CMath::normalize_Vector<float>( ety::CMath::build_DirectionVector<float>( c_sfVectorPosition, sf::Vector2f( static_cast<float>( ety::CMouse::get_Position( p_c_etyCameraComponent->get_View() ).x ), static_cast<float>( ety::CMouse::get_Position( p_c_etyCameraComponent->get_View() ).y ) ) ) );
					
						const float fTargetAngle = -( atan2( c_sfVectorTarget.x, c_sfVectorTarget.y ) * 180.f / PI );
					
						rotate_ToAngle( fTargetAngle, uiFrameTime );
					}

					if( sf::Keyboard::isKeyPressed	( sf::Keyboard::W ) )
					{
						accelerate_Forward( uiFrameTime );
					}
					if(sf::Keyboard::isKeyPressed	( sf::Keyboard::S ) )
					{
						accelerate_Backward( uiFrameTime );
					}
					if( sf::Keyboard::isKeyPressed	( sf::Keyboard::A ) )
					{
						accelerate_Left( uiFrameTime );
					}
					if( sf::Keyboard::isKeyPressed	( sf::Keyboard::D ) )
					{
						accelerate_Right( uiFrameTime );
					}

					continue_Movement( uiFrameTime );
				}
			}

const		std::string		ety::CMovablePlayerComponent::get_ComponentID							( void )
			{
				return "MovablePlayerComponent";
			}

//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//

							ety::CMovableNPCComponent::CMovableNPCComponent							( void )
							{
								left = true;
							}
							ety::CMovableNPCComponent::~CMovableNPCComponent						( void )
							{
							}

			void			ety::CMovableNPCComponent::update_Component								( const sf::Uint32& uiFrameTime )
			{
				m_uiFrameTime	=	uiFrameTime;

				CEntity*		p_c_etyEntityPlayer			=	gp_c_etyWorld->get_Entitymanager()->get_Entity("Player");
				sf::Vector2f	c_sfVector2fPlayerPosition	=	p_c_etyEntityPlayer->get_Component<CRenderComponent>("RenderComponent")->get_Position();
				sf::Vector2f	c_sfVector2fNPCPosition		=	this->get_Owner()->get_Component<CRenderComponent>("RenderComponent")->get_Position();

				if(c_sfVector2fNPCPosition.x	!=	c_sfVector2fPlayerPosition.x)
				{
					//this->move_ToPosition(sf::Vector2f(c_sfVector2fPlayerPosition.x, c_sfVector2fNPCPosition.y));
				}
				

				const sf::Vector2f c_sfVectorTarget		= ety::CMath::normalize_Vector<float>( ety::CMath::build_DirectionVector<float>( c_sfVector2fNPCPosition, sf::Vector2f( static_cast<float>( c_sfVector2fPlayerPosition.x ), static_cast<float>( c_sfVector2fPlayerPosition.y ) ) ) );	
				const float fTargetAngle = -( atan2( c_sfVectorTarget.x, c_sfVectorTarget.y ) * 180.f / PI );
					
				rotate_ToAngle( fTargetAngle, uiFrameTime );
				

				int y = int(ety::CMath::calculate_Length(ety::CMath::build_DirectionVector<float>(c_sfVector2fPlayerPosition, c_sfVector2fNPCPosition)));

				srand(time(NULL));
				int zufallszahl = rand() % 10 + 1;

				std::cout << zufallszahl << std::endl;
				if(zufallszahl >= 8)
				{
					
					if(left == true)
					{
						left = false;
					}
					else if(left == false)
					{
						left = true;
					}
				}

				if(y > 280.f)
				{
					//accelerate_Left( uiFrameTime );
					accelerate_Forward( uiFrameTime );
					//
				}
				else if(y < 220.f)
				{
					
					accelerate_Backward( uiFrameTime );
					//
				}
				else if(y > 220.f && y < 280.f)
				{
					if(left == true)
					{
						accelerate_Left( uiFrameTime );
					}
					else
					{
						accelerate_Right( uiFrameTime );
					}
					
					//stop_Movement();
				}

				//>std::cout << y << std::endl;
				
				continue_Movement( m_uiFrameTime );
			}

const		std::string		ety::CMovableNPCComponent::get_ComponentID								( void )
			{
				return "MovableNPCComponent";
			}

//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//

							ety::CMovableEnvironmentComponent::CMovableEnvironmentComponent			( void )
							{
							}
							ety::CMovableEnvironmentComponent::~CMovableEnvironmentComponent		( void )
							{
							}

			void			ety::CMovableEnvironmentComponent::update_Component						( const sf::Uint32& uiFrameTime )
			{
				continue_Movement	( uiFrameTime );
				rotate_Clockwise	( uiFrameTime );
			}

const		std::string		ety::CMovableEnvironmentComponent::get_ComponentID						( void )
			{
				return "MovableEnvironmentComponent";
			}

//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
