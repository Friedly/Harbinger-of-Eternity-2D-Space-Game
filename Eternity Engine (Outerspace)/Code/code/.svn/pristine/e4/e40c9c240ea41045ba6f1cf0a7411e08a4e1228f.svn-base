#pragma once

//Eternity-Engine
#include "CComponent.hpp"

#include "CMathConvertClasses.hpp"

//SFML-Bibliothek
#include <SFML\Graphics\Sprite.hpp>

#include <boost\shared_ptr.hpp>

namespace ety
{

	//#########################################################################################################//
	//#########################################################################################################//
	//#########################################################################################################//

	class CMovableComponent : public CComponent
	{
	private:
	protected:
								bool								m_bStopMoving;
								bool								m_bAccelerate;

								float								m_fTargetAngle;

								boost::shared_ptr<sf::Vector2f>		mp_c_sfVectorTargetPosition;

	public:
																	CMovableComponent					( void );
		virtual														~CMovableComponent					( void );

								void								accelerate_Movement					( const sf::Uint32& uiFrameTime );

								void								continue_Movement					( const sf::Uint32& uiFrameTime );

								void								decelerate_Movement					( const sf::Uint32& uiFrameTime );

								void								move_ToPosition						( const sf::Vector2f& c_sfVectorPosition, const sf::Uint32& uiFrameTime );
								void								move_Left							( const sf::Uint32& uiFrameTime );
								void								move_Right							( const sf::Uint32& uiFrameTime );

								void								rotate_ToAngle						( float fTargetAngle, const sf::Uint32& uiFrameTime, const bool bSetNewDirection);
								void								rotate_Clockwise					( const sf::Uint32& uiFrameTime, const bool bSetNewDirection );
								void								rotate_CounterClockwise				( const sf::Uint32& uiFrameTime, const bool bSetNewDirection );

								void								stop_Moving							( void );

					const		std::string							get_FamilyID						( void );
		virtual		const		std::string							get_ComponentID						( void ) = 0;
	};

	//#########################################################################################################//
	//#########################################################################################################//
	//#########################################################################################################//

	class CMovablePlayerComponent : public CMovableComponent
	{
		private:
		protected:
		public:
																	CMovablePlayerComponent				( void );
		virtual														~CMovablePlayerComponent			( void );

		virtual					void								update_Component					( const sf::Uint32& uiFrameTime );

		virtual		const		std::string							get_ComponentID						( void );
	};

	//#########################################################################################################//
	//#########################################################################################################//
	//#########################################################################################################//
	
	class CMovableEnvironmentComponent : public CMovableComponent
	{
		private:
		protected:
		public:
																	CMovableEnvironmentComponent		( void );
		virtual														~CMovableEnvironmentComponent		( void );

		virtual					void								update_Component					( const sf::Uint32& uiFrameTime );

		virtual		const		std::string							get_ComponentID						( void );
	};

	//#########################################################################################################//
	//#########################################################################################################//
	//#########################################################################################################//

	class CMovableNPCComponent : public CMovableComponent
	{
		private:
		protected:
		public:
																	CMovableNPCComponent				( void );
		virtual														~CMovableNPCComponent				( void );

		virtual					void								update_Component					( const sf::Uint32& uiFrameTime );

		virtual		const		std::string							get_ComponentID						( void );
	};

	//#########################################################################################################//
	//#########################################################################################################//
	//#########################################################################################################//
}

